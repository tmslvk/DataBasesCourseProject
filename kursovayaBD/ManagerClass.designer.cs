#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace kursovayaBD
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="advertiseKursovaya")]
	public partial class ManagerClassDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Определения метода расширяемости
    partial void OnCreated();
    partial void Insertmanager(manager instance);
    partial void Updatemanager(manager instance);
    partial void Deletemanager(manager instance);
    partial void InsertadServices(adServices instance);
    partial void UpdateadServices(adServices instance);
    partial void DeleteadServices(adServices instance);
    partial void Insertcustomer(customer instance);
    partial void Updatecustomer(customer instance);
    partial void Deletecustomer(customer instance);
    partial void Insertorders(orders instance);
    partial void Updateorders(orders instance);
    partial void Deleteorders(orders instance);
    partial void InsertplaceOfAdvertisement(placeOfAdvertisement instance);
    partial void UpdateplaceOfAdvertisement(placeOfAdvertisement instance);
    partial void DeleteplaceOfAdvertisement(placeOfAdvertisement instance);
    #endregion
		
		public ManagerClassDataContext() : 
				base(global::kursovayaBD.Properties.Settings.Default.advertiseKursovayaConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public ManagerClassDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ManagerClassDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ManagerClassDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ManagerClassDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<manager> manager
		{
			get
			{
				return this.GetTable<manager>();
			}
		}
		
		public System.Data.Linq.Table<adServices> adServices
		{
			get
			{
				return this.GetTable<adServices>();
			}
		}
		
		public System.Data.Linq.Table<customer> customer
		{
			get
			{
				return this.GetTable<customer>();
			}
		}
		
		public System.Data.Linq.Table<orders> orders
		{
			get
			{
				return this.GetTable<orders>();
			}
		}
		
		public System.Data.Linq.Table<placeOfAdvertisement> placeOfAdvertisement
		{
			get
			{
				return this.GetTable<placeOfAdvertisement>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.manager")]
	public partial class manager : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _managerID;
		
		private string _lastname;
		
		private string _firstname;
		
		private string _middlename;
		
		private int _phoneNumber;
		
		private string _email;
		
		private string _password;
		
		private EntitySet<orders> _orders;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnmanagerIDChanging(int value);
    partial void OnmanagerIDChanged();
    partial void OnlastnameChanging(string value);
    partial void OnlastnameChanged();
    partial void OnfirstnameChanging(string value);
    partial void OnfirstnameChanged();
    partial void OnmiddlenameChanging(string value);
    partial void OnmiddlenameChanged();
    partial void OnphoneNumberChanging(int value);
    partial void OnphoneNumberChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    #endregion
		
		public manager()
		{
			this._orders = new EntitySet<orders>(new Action<orders>(this.attach_orders), new Action<orders>(this.detach_orders));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_managerID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int managerID
		{
			get
			{
				return this._managerID;
			}
			set
			{
				if ((this._managerID != value))
				{
					this.OnmanagerIDChanging(value);
					this.SendPropertyChanging();
					this._managerID = value;
					this.SendPropertyChanged("managerID");
					this.OnmanagerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lastname", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string lastname
		{
			get
			{
				return this._lastname;
			}
			set
			{
				if ((this._lastname != value))
				{
					this.OnlastnameChanging(value);
					this.SendPropertyChanging();
					this._lastname = value;
					this.SendPropertyChanged("lastname");
					this.OnlastnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_firstname", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string firstname
		{
			get
			{
				return this._firstname;
			}
			set
			{
				if ((this._firstname != value))
				{
					this.OnfirstnameChanging(value);
					this.SendPropertyChanging();
					this._firstname = value;
					this.SendPropertyChanged("firstname");
					this.OnfirstnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_middlename", DbType="NVarChar(50)")]
		public string middlename
		{
			get
			{
				return this._middlename;
			}
			set
			{
				if ((this._middlename != value))
				{
					this.OnmiddlenameChanging(value);
					this.SendPropertyChanging();
					this._middlename = value;
					this.SendPropertyChanged("middlename");
					this.OnmiddlenameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_phoneNumber", DbType="Int NOT NULL")]
		public int phoneNumber
		{
			get
			{
				return this._phoneNumber;
			}
			set
			{
				if ((this._phoneNumber != value))
				{
					this.OnphoneNumberChanging(value);
					this.SendPropertyChanging();
					this._phoneNumber = value;
					this.SendPropertyChanged("phoneNumber");
					this.OnphoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="manager_orders", Storage="_orders", ThisKey="managerID", OtherKey="managerID")]
		public EntitySet<orders> orders
		{
			get
			{
				return this._orders;
			}
			set
			{
				this._orders.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_orders(orders entity)
		{
			this.SendPropertyChanging();
			entity.manager = this;
		}
		
		private void detach_orders(orders entity)
		{
			this.SendPropertyChanging();
			entity.manager = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.adServices")]
	public partial class adServices : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _serviceID;
		
		private string _service;
		
		private string _serviceDescription;
		
		private EntitySet<orders> _orders;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnserviceIDChanging(int value);
    partial void OnserviceIDChanged();
    partial void OnserviceChanging(string value);
    partial void OnserviceChanged();
    partial void OnserviceDescriptionChanging(string value);
    partial void OnserviceDescriptionChanged();
    #endregion
		
		public adServices()
		{
			this._orders = new EntitySet<orders>(new Action<orders>(this.attach_orders), new Action<orders>(this.detach_orders));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_serviceID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int serviceID
		{
			get
			{
				return this._serviceID;
			}
			set
			{
				if ((this._serviceID != value))
				{
					this.OnserviceIDChanging(value);
					this.SendPropertyChanging();
					this._serviceID = value;
					this.SendPropertyChanged("serviceID");
					this.OnserviceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_service", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string service
		{
			get
			{
				return this._service;
			}
			set
			{
				if ((this._service != value))
				{
					this.OnserviceChanging(value);
					this.SendPropertyChanging();
					this._service = value;
					this.SendPropertyChanged("service");
					this.OnserviceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_serviceDescription", DbType="NVarChar(MAX)")]
		public string serviceDescription
		{
			get
			{
				return this._serviceDescription;
			}
			set
			{
				if ((this._serviceDescription != value))
				{
					this.OnserviceDescriptionChanging(value);
					this.SendPropertyChanging();
					this._serviceDescription = value;
					this.SendPropertyChanged("serviceDescription");
					this.OnserviceDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="adServices_orders", Storage="_orders", ThisKey="serviceID", OtherKey="serviceID")]
		public EntitySet<orders> orders
		{
			get
			{
				return this._orders;
			}
			set
			{
				this._orders.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_orders(orders entity)
		{
			this.SendPropertyChanging();
			entity.adServices = this;
		}
		
		private void detach_orders(orders entity)
		{
			this.SendPropertyChanging();
			entity.adServices = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.customer")]
	public partial class customer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _userID;
		
		private string _lastname;
		
		private string _firstname;
		
		private string _middlename;
		
		private string _email;
		
		private string _password;
		
		private EntitySet<orders> _orders;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnuserIDChanging(int value);
    partial void OnuserIDChanged();
    partial void OnlastnameChanging(string value);
    partial void OnlastnameChanged();
    partial void OnfirstnameChanging(string value);
    partial void OnfirstnameChanged();
    partial void OnmiddlenameChanging(string value);
    partial void OnmiddlenameChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    #endregion
		
		public customer()
		{
			this._orders = new EntitySet<orders>(new Action<orders>(this.attach_orders), new Action<orders>(this.detach_orders));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int userID
		{
			get
			{
				return this._userID;
			}
			set
			{
				if ((this._userID != value))
				{
					this.OnuserIDChanging(value);
					this.SendPropertyChanging();
					this._userID = value;
					this.SendPropertyChanged("userID");
					this.OnuserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lastname", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string lastname
		{
			get
			{
				return this._lastname;
			}
			set
			{
				if ((this._lastname != value))
				{
					this.OnlastnameChanging(value);
					this.SendPropertyChanging();
					this._lastname = value;
					this.SendPropertyChanged("lastname");
					this.OnlastnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_firstname", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string firstname
		{
			get
			{
				return this._firstname;
			}
			set
			{
				if ((this._firstname != value))
				{
					this.OnfirstnameChanging(value);
					this.SendPropertyChanging();
					this._firstname = value;
					this.SendPropertyChanged("firstname");
					this.OnfirstnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_middlename", DbType="NVarChar(50)")]
		public string middlename
		{
			get
			{
				return this._middlename;
			}
			set
			{
				if ((this._middlename != value))
				{
					this.OnmiddlenameChanging(value);
					this.SendPropertyChanging();
					this._middlename = value;
					this.SendPropertyChanged("middlename");
					this.OnmiddlenameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="customer_orders", Storage="_orders", ThisKey="userID", OtherKey="userID")]
		public EntitySet<orders> orders
		{
			get
			{
				return this._orders;
			}
			set
			{
				this._orders.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_orders(orders entity)
		{
			this.SendPropertyChanging();
			entity.customer = this;
		}
		
		private void detach_orders(orders entity)
		{
			this.SendPropertyChanging();
			entity.customer = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.orders")]
	public partial class orders : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _orderID;
		
		private int _serviceID;
		
		private System.DateTime _dateAdFrom;
		
		private System.DateTime _dateAdTo;
		
		private int _userID;
		
		private int _managerID;
		
		private int _placeID;
		
		private EntityRef<manager> _manager;
		
		private EntityRef<adServices> _adServices;
		
		private EntityRef<customer> _customer;
		
		private EntityRef<placeOfAdvertisement> _placeOfAdvertisement;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnorderIDChanging(int value);
    partial void OnorderIDChanged();
    partial void OnserviceIDChanging(int value);
    partial void OnserviceIDChanged();
    partial void OndateAdFromChanging(System.DateTime value);
    partial void OndateAdFromChanged();
    partial void OndateAdToChanging(System.DateTime value);
    partial void OndateAdToChanged();
    partial void OnuserIDChanging(int value);
    partial void OnuserIDChanged();
    partial void OnmanagerIDChanging(int value);
    partial void OnmanagerIDChanged();
    partial void OnplaceIDChanging(int value);
    partial void OnplaceIDChanged();
    #endregion
		
		public orders()
		{
			this._manager = default(EntityRef<manager>);
			this._adServices = default(EntityRef<adServices>);
			this._customer = default(EntityRef<customer>);
			this._placeOfAdvertisement = default(EntityRef<placeOfAdvertisement>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_orderID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int orderID
		{
			get
			{
				return this._orderID;
			}
			set
			{
				if ((this._orderID != value))
				{
					this.OnorderIDChanging(value);
					this.SendPropertyChanging();
					this._orderID = value;
					this.SendPropertyChanged("orderID");
					this.OnorderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_serviceID", DbType="Int NOT NULL")]
		public int serviceID
		{
			get
			{
				return this._serviceID;
			}
			set
			{
				if ((this._serviceID != value))
				{
					if (this._adServices.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnserviceIDChanging(value);
					this.SendPropertyChanging();
					this._serviceID = value;
					this.SendPropertyChanged("serviceID");
					this.OnserviceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dateAdFrom", DbType="Date NOT NULL")]
		public System.DateTime dateAdFrom
		{
			get
			{
				return this._dateAdFrom;
			}
			set
			{
				if ((this._dateAdFrom != value))
				{
					this.OndateAdFromChanging(value);
					this.SendPropertyChanging();
					this._dateAdFrom = value;
					this.SendPropertyChanged("dateAdFrom");
					this.OndateAdFromChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dateAdTo", DbType="Date NOT NULL")]
		public System.DateTime dateAdTo
		{
			get
			{
				return this._dateAdTo;
			}
			set
			{
				if ((this._dateAdTo != value))
				{
					this.OndateAdToChanging(value);
					this.SendPropertyChanging();
					this._dateAdTo = value;
					this.SendPropertyChanged("dateAdTo");
					this.OndateAdToChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userID", DbType="Int NOT NULL")]
		public int userID
		{
			get
			{
				return this._userID;
			}
			set
			{
				if ((this._userID != value))
				{
					if (this._customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuserIDChanging(value);
					this.SendPropertyChanging();
					this._userID = value;
					this.SendPropertyChanged("userID");
					this.OnuserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_managerID", DbType="Int NOT NULL")]
		public int managerID
		{
			get
			{
				return this._managerID;
			}
			set
			{
				if ((this._managerID != value))
				{
					if (this._manager.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnmanagerIDChanging(value);
					this.SendPropertyChanging();
					this._managerID = value;
					this.SendPropertyChanged("managerID");
					this.OnmanagerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_placeID", DbType="Int NOT NULL")]
		public int placeID
		{
			get
			{
				return this._placeID;
			}
			set
			{
				if ((this._placeID != value))
				{
					if (this._placeOfAdvertisement.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnplaceIDChanging(value);
					this.SendPropertyChanging();
					this._placeID = value;
					this.SendPropertyChanged("placeID");
					this.OnplaceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="manager_orders", Storage="_manager", ThisKey="managerID", OtherKey="managerID", IsForeignKey=true)]
		public manager manager
		{
			get
			{
				return this._manager.Entity;
			}
			set
			{
				manager previousValue = this._manager.Entity;
				if (((previousValue != value) 
							|| (this._manager.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._manager.Entity = null;
						previousValue.orders.Remove(this);
					}
					this._manager.Entity = value;
					if ((value != null))
					{
						value.orders.Add(this);
						this._managerID = value.managerID;
					}
					else
					{
						this._managerID = default(int);
					}
					this.SendPropertyChanged("manager");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="adServices_orders", Storage="_adServices", ThisKey="serviceID", OtherKey="serviceID", IsForeignKey=true)]
		public adServices adServices
		{
			get
			{
				return this._adServices.Entity;
			}
			set
			{
				adServices previousValue = this._adServices.Entity;
				if (((previousValue != value) 
							|| (this._adServices.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._adServices.Entity = null;
						previousValue.orders.Remove(this);
					}
					this._adServices.Entity = value;
					if ((value != null))
					{
						value.orders.Add(this);
						this._serviceID = value.serviceID;
					}
					else
					{
						this._serviceID = default(int);
					}
					this.SendPropertyChanged("adServices");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="customer_orders", Storage="_customer", ThisKey="userID", OtherKey="userID", IsForeignKey=true)]
		public customer customer
		{
			get
			{
				return this._customer.Entity;
			}
			set
			{
				customer previousValue = this._customer.Entity;
				if (((previousValue != value) 
							|| (this._customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._customer.Entity = null;
						previousValue.orders.Remove(this);
					}
					this._customer.Entity = value;
					if ((value != null))
					{
						value.orders.Add(this);
						this._userID = value.userID;
					}
					else
					{
						this._userID = default(int);
					}
					this.SendPropertyChanged("customer");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="placeOfAdvertisement_orders", Storage="_placeOfAdvertisement", ThisKey="placeID", OtherKey="placeID", IsForeignKey=true)]
		public placeOfAdvertisement placeOfAdvertisement
		{
			get
			{
				return this._placeOfAdvertisement.Entity;
			}
			set
			{
				placeOfAdvertisement previousValue = this._placeOfAdvertisement.Entity;
				if (((previousValue != value) 
							|| (this._placeOfAdvertisement.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._placeOfAdvertisement.Entity = null;
						previousValue.orders.Remove(this);
					}
					this._placeOfAdvertisement.Entity = value;
					if ((value != null))
					{
						value.orders.Add(this);
						this._placeID = value.placeID;
					}
					else
					{
						this._placeID = default(int);
					}
					this.SendPropertyChanged("placeOfAdvertisement");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.placeOfAdvertisement")]
	public partial class placeOfAdvertisement : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _placeID;
		
		private int _rentPrice;
		
		private string _typeOfAd;
		
		private EntitySet<orders> _orders;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnplaceIDChanging(int value);
    partial void OnplaceIDChanged();
    partial void OnrentPriceChanging(int value);
    partial void OnrentPriceChanged();
    partial void OntypeOfAdChanging(string value);
    partial void OntypeOfAdChanged();
    #endregion
		
		public placeOfAdvertisement()
		{
			this._orders = new EntitySet<orders>(new Action<orders>(this.attach_orders), new Action<orders>(this.detach_orders));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_placeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int placeID
		{
			get
			{
				return this._placeID;
			}
			set
			{
				if ((this._placeID != value))
				{
					this.OnplaceIDChanging(value);
					this.SendPropertyChanging();
					this._placeID = value;
					this.SendPropertyChanged("placeID");
					this.OnplaceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_rentPrice", DbType="Int NOT NULL")]
		public int rentPrice
		{
			get
			{
				return this._rentPrice;
			}
			set
			{
				if ((this._rentPrice != value))
				{
					this.OnrentPriceChanging(value);
					this.SendPropertyChanging();
					this._rentPrice = value;
					this.SendPropertyChanged("rentPrice");
					this.OnrentPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_typeOfAd", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string typeOfAd
		{
			get
			{
				return this._typeOfAd;
			}
			set
			{
				if ((this._typeOfAd != value))
				{
					this.OntypeOfAdChanging(value);
					this.SendPropertyChanging();
					this._typeOfAd = value;
					this.SendPropertyChanged("typeOfAd");
					this.OntypeOfAdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="placeOfAdvertisement_orders", Storage="_orders", ThisKey="placeID", OtherKey="placeID")]
		public EntitySet<orders> orders
		{
			get
			{
				return this._orders;
			}
			set
			{
				this._orders.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_orders(orders entity)
		{
			this.SendPropertyChanging();
			entity.placeOfAdvertisement = this;
		}
		
		private void detach_orders(orders entity)
		{
			this.SendPropertyChanging();
			entity.placeOfAdvertisement = null;
		}
	}
}
#pragma warning restore 1591
